---
import { getLocale } from "astro-i18n-aut";
import { getAvailableLocales, getLocaleName } from "../utils/i18n";

const currentLocale = getLocale(Astro.url);
const availableLocales = getAvailableLocales();
const pathname = Astro.url.pathname;
function createLanguageUrl(locale: string) {
  const isDefault = locale === 'en';
  const cleanPath = pathname.replace(/^\/(en|ja|zh)\//, '/').replace(/\/$/, '') || '/';
  
  if (isDefault) {
    return cleanPath === '/' ? '/' : `${cleanPath}/`;
  } else {
    return cleanPath === '/' ? `/${locale}/` : `/${locale}${cleanPath}/`;
  }
}
const componentId = Math.random().toString(36).substring(2, 9);
---

<div class="language-switcher" id={`lang-switcher-${componentId}`}>
  <div class="inline-block">
    <button 
      type="button" 
      aria-haspopup="true" 
      aria-expanded="false"
      class="language-button flex items-center space-x-1 lg:px-3 py-2 text-gray-600 hover:text-gray-900 transition-colors">
      <span>{getLocaleName(currentLocale)}</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    
    <div class="language-dropdown origin-top-right absolute right-0 lg:right-auto mt-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none hidden z-50" role="menu" aria-orientation="vertical">
      <div class="py-1" role="none">
        {availableLocales.map(locale => (
          <a 
            href={createLanguageUrl(locale)} 
            class={`block px-4 py-2 text-sm ${locale === currentLocale 
              ? 'bg-gray-100 text-gray-900 font-medium' 
              : 'text-gray-700 hover:bg-gray-50'}`}
            role="menuitem"
          >
            {getLocaleName(locale)}
          </a>
        ))}
      </div>
    </div>
  </div>
</div>

<script define:vars={{ componentId }}>
  (function() {
    const container = document.getElementById(`lang-switcher-${componentId}`);
    if (!container) return;
    
    const button = container.querySelector('.language-button');
    const dropdown = container.querySelector('.language-dropdown');
    
    if (!button || !dropdown) return;
    
    let isOpen = false;
    
    function toggleDropdown() {
      isOpen = !isOpen;
      if (isOpen) {
        dropdown.classList.remove('hidden');
        button.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.add('hidden');
        button.setAttribute('aria-expanded', 'false');
      }
    }
    
    button.addEventListener('click', function(e) {
      e.stopPropagation();
      toggleDropdown();
    });
    
    document.addEventListener('click', function(e) {
      if (!container.contains(e.target) && isOpen) {
        toggleDropdown();
      }
    });
    
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && isOpen) {
        toggleDropdown();
      }
    });
  })();
</script>

<style>
  .language-switcher {
    display: inline-flex;
    align-items: center;
    height: 100%;
  }
  
  .language-button {
    font-size: inherit;
    line-height: inherit;
  }
  
  @media (max-width: 1023px) {
    .language-switcher {
      width: auto;
    }
  }
</style>
